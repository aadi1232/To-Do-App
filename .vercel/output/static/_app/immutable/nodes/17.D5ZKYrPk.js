import"../chunks/CWj6FrbW.js";import"../chunks/69_IOA4Y.js";import{p as me,ad as ve,ae as fe,t as l,a as he,$ as ye,s as a,c as i,b as s,m as b,g as t,r as d,d as we}from"../chunks/PWWI3Ue3.js";import{t as f,h as _e,e as u,a as m,s as v}from"../chunks/BC15lkC2.js";import{i as N}from"../chunks/BsCQza_p.js";import{s as H}from"../chunks/DBYvBCBS.js";import{i as xe}from"../chunks/BEc5jUYy.js";import{a as Te,s as Se}from"../chunks/6avubi_o.js";import{o as Ie}from"../chunks/D93VaLay.js";import{c as Ee,a as U,p as C}from"../chunks/BIOqlViq.js";var ke=f('<p class="mt-1 text-sm text-gray-600"> </p>'),$e=f('<p class="mt-1 text-sm text-gray-600"> </p>'),Ne=f("<p> </p>"),Ue=f(`<div class="container mx-auto max-w-2xl p-6"><h1 class="mb-6 text-2xl font-bold">Test Real-Time Notifications</h1> <div class="mb-6 rounded-lg border border-gray-200 bg-white p-4 shadow-sm"><h2 class="mb-2 text-lg font-semibold">Connection Status</h2> <div class="flex items-center gap-2"><div></div> <span> </span></div> <!> <!> <!></div> <div class="mb-6 rounded-lg border border-gray-200 bg-white p-6 shadow-sm"><h2 class="mb-4 text-lg font-semibold">ðŸ”´ Direct Group Invitation Test</h2> <p class="mb-4 text-sm text-gray-600">This uses a direct communication method to bypass any middleware and ensure the notification
			reaches the user directly. Try this if regular invitations aren't working.</p> <button class="w-full rounded-md bg-red-600 px-4 py-2 text-white hover:bg-red-700 disabled:opacity-50">Send Direct Group Invitation</button></div> <div class="mb-6 rounded-lg border border-gray-200 bg-white p-6 shadow-sm"><h2 class="mb-4 text-lg font-semibold">Test Required Notification Types</h2> <p class="mb-6 text-sm text-gray-600">These are the specific notification types needed for the app:</p> <div class="grid gap-4 md:grid-cols-2"><button class="rounded-md bg-blue-600 px-4 py-2 text-white hover:bg-blue-700 disabled:opacity-50">1. Group Invitation</button> <button class="rounded-md bg-green-600 px-4 py-2 text-white hover:bg-green-700 disabled:opacity-50">2. Todo Completed</button> <button class="rounded-md bg-purple-600 px-4 py-2 text-white hover:bg-purple-700 disabled:opacity-50">3a. User Role Changed</button> <button class="rounded-md bg-red-600 px-4 py-2 text-white hover:bg-red-700 disabled:opacity-50">3b. User Removed</button></div></div> <div class="mb-6 rounded-lg border border-gray-200 bg-white p-6 shadow-sm"><h2 class="mb-4 text-lg font-semibold">Send Real Socket Notifications</h2> <p class="mb-6 text-sm text-gray-600">These buttons trigger real Socket.IO events through the standalone socket server. Socket.IO
			must be running on port 3001.</p> <div class="grid gap-4 md:grid-cols-2"><button class="rounded-md bg-blue-600 px-4 py-2 text-white hover:bg-blue-700 disabled:opacity-50">Real Group Invitation</button> <button class="rounded-md bg-green-600 px-4 py-2 text-white hover:bg-green-700 disabled:opacity-50">Real Todo Created</button> <button class="rounded-md bg-yellow-600 px-4 py-2 text-white hover:bg-yellow-700 disabled:opacity-50">Real Todo Updated</button></div></div> <div class="rounded-lg border border-gray-200 bg-white p-6 shadow-sm"><h2 class="mb-4 text-lg font-semibold">Send Client-side Notifications</h2> <p class="mb-6 text-sm text-gray-600">These buttons send test notifications directly from the client. These are client-side only and
			will not affect other users.</p> <div class="grid gap-4 md:grid-cols-2"><button class="rounded-md bg-blue-600 px-4 py-2 text-white hover:bg-blue-700">Test Group Invitation</button> <button class="rounded-md bg-blue-600 px-4 py-2 text-white hover:bg-blue-700">Test User Joined Group</button> <button class="rounded-md bg-green-600 px-4 py-2 text-white hover:bg-green-700">Test Todo Added</button></div></div></div>`);function Ae(K,L){me(L,!1);const[Q,V]=Te(),D=()=>Se(Ee,"$connected",Q);let n=b(""),p=b(""),c=b(!1),r=b("");Ie(async()=>{try{const e=await fetch("/api/auth/me");if(e.ok){const o=await e.json();s(n,o._id)}if(t(n)){const o=await fetch("/api/groups");if(o.ok){const g=await o.json();g.groups&&g.groups.length>0&&s(p,g.groups[0]._id)}}}catch(e){console.error("Error fetching data:",e)}});function X(){U({id:`test_inv_${Date.now()}`,type:"group:invited",title:"Group Invitation",message:"You have been invited to join Test Group",timestamp:new Date().toISOString(),read:!1,data:{group:{_id:"test-group-id",name:"Test Group"},invitedBy:"Test User"}}),C()}function Z(){U({id:`test_join_${Date.now()}`,type:"group:joined",title:"Group Update",message:"Test User joined the group",timestamp:new Date().toISOString(),read:!1,data:{user:{_id:"test-user-id",username:"Test User"}}}),C()}function ee(){U({id:`test_todo_${Date.now()}`,type:"todo:added",title:"Todo Update",message:"Test User added a new todo: Test Todo",timestamp:new Date().toISOString(),read:!1,data:{todo:{_id:"test-todo-id",title:"Test Todo"},performedBy:{userId:"test-user-id",username:"Test User"}}}),C()}async function te(){if(!t(n)){s(r,"Error: No user ID");return}try{s(r,"Sending request...");const o=await(await fetch("/api/test-socket",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({action:"todo:create",userId:t(n),groupId:t(p)||void 0})})).json();s(r,o.success?"Success: Todo creation notification sent":`Error: ${o.message||"Unknown error"}`)}catch(e){s(r,`Error: ${e instanceof Error?e.message:"Connection failed"}`),console.error("Error triggering real todo create:",e)}}async function oe(){if(!t(n)){s(r,"Error: No user ID");return}try{s(r,"Sending request...");const o=await(await fetch("/api/test-socket",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({action:"todo:update",userId:t(n),groupId:t(p)||void 0})})).json();s(r,o.success?"Success: Todo update notification sent":`Error: ${o.message||"Unknown error"}`)}catch(e){s(r,`Error: ${e instanceof Error?e.message:"Connection failed"}`),console.error("Error triggering real todo update:",e)}}async function O(){if(!t(n)){s(r,"Error: No user ID");return}try{s(r,"Sending request...");const o=await(await fetch("/api/test-socket",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({action:"group:invite",userId:t(n),groupId:t(p)||void 0})})).json();s(r,o.success?"Success: Group invitation notification sent":`Error: ${o.message||"Unknown error"}`)}catch(e){s(r,`Error: ${e instanceof Error?e.message:"Connection failed"}`),console.error("Error triggering real group invite:",e)}}async function re(){if(!t(n)){s(r,"Error: No user ID");return}try{s(r,"Sending request...");const o=await(await fetch("/api/test-socket",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({action:"todo:completed",userId:t(n),groupId:t(p)||void 0})})).json();s(r,o.success?"Success: Todo completed notification sent":`Error: ${o.message||"Unknown error"}`)}catch(e){s(r,`Error: ${e instanceof Error?e.message:"Failed to trigger event"}`),console.error("Error triggering todo completed:",e)}}async function se(){if(!t(n)){s(r,"Error: No user ID");return}try{s(r,"Sending request...");const o=await(await fetch("/api/test-socket",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({action:"group:user_role_changed",userId:t(n),groupId:t(p)||void 0})})).json();s(r,o.success?"Success: Role change notification sent":`Error: ${o.message||"Unknown error"}`)}catch(e){s(r,`Error: ${e instanceof Error?e.message:"Failed to trigger event"}`),console.error("Error triggering role change:",e)}}async function ne(){if(!t(n)){s(r,"Error: No user ID");return}try{s(r,"Sending request...");const o=await(await fetch("/api/test-socket",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({action:"group:user_removed",userId:t(n),groupId:t(p)||void 0})})).json();s(r,o.success?"Success: User removed notification sent":`Error: ${o.message||"Unknown error"}`)}catch(e){s(r,`Error: ${e instanceof Error?e.message:"Failed to trigger event"}`),console.error("Error triggering user removed:",e)}}async function ae(){if(!t(n)){s(r,"Error: No user ID");return}try{s(r,"Sending direct invitation request...");const o=await(await fetch("/api/test-socket",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({action:"direct:group_invite",userId:t(n),groupId:t(p)||void 0})})).json();s(r,o.success?"Success: Direct group invitation sent":`Error: ${o.message||"Unknown error"}`)}catch(e){s(r,`Error: ${e instanceof Error?e.message:"Failed to send direct invitation"}`),console.error("Error sending direct invitation:",e)}}ve(()=>D(),()=>{s(c,D())}),fe(),xe();var h=Ue();_e(e=>{ye.title="Test Notifications"});var y=a(i(h),2),w=a(i(y),2),j=i(w),G=a(j,2),ie=i(G,!0);d(G),d(w);var R=a(w,2);{var de=e=>{var o=ke(),g=i(o);d(o),l(()=>v(g,`User ID: ${t(n)??""}`)),m(e,o)};N(R,e=>{t(n)&&e(de)})}var q=a(R,2);{var ce=e=>{var o=$e(),g=i(o);d(o),l(()=>v(g,`Group ID: ${t(p)??""}`)),m(e,o)};N(q,e=>{t(p)&&e(ce)})}var ue=a(q,2);{var pe=e=>{var o=Ne();let g;var le=i(o,!0);d(o),l(be=>{g=H(o,1,"mt-2 text-sm",null,g,be),v(le,t(r))},[()=>({"text-green-600":t(r).startsWith("Success"),"text-red-600":t(r).startsWith("Error")})],we),m(e,o)};N(ue,e=>{t(r)&&e(pe)})}d(y);var _=a(y,2),J=a(i(_),4);d(_);var x=a(_,2),P=a(i(x),4),T=i(P),S=a(T,2),I=a(S,2),F=a(I,2);d(P),d(x);var E=a(x,2),A=a(i(E),4),k=i(A),$=a(k,2),B=a($,2);d(A),d(E);var W=a(E,2),M=a(i(W),4),Y=i(M),z=a(Y,2),ge=a(z,2);d(M),d(W),d(h),l(()=>{H(j,1,`h-3 w-3 rounded-full ${t(c)?"bg-green-500":"bg-red-500"}`),v(ie,t(c)?"Connected to Socket.IO":"Not Connected to Socket.IO"),J.disabled=!t(c)||!t(n),T.disabled=!t(c)||!t(n),S.disabled=!t(c)||!t(n),I.disabled=!t(c)||!t(n),F.disabled=!t(c)||!t(n),k.disabled=!t(c)||!t(n),$.disabled=!t(c)||!t(n),B.disabled=!t(c)||!t(n)}),u("click",J,ae),u("click",T,O),u("click",S,re),u("click",I,se),u("click",F,ne),u("click",k,O),u("click",$,te),u("click",B,oe),u("click",Y,X),u("click",z,Z),u("click",ge,ee),m(K,h),he(),V()}export{Ae as component};
