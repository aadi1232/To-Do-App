async function s(o){const t=await fetch("/api/groups",{method:"POST",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify(o)});if(!t.ok){if(t.status===401)throw new Error("Not authorized, no token");const n=await t.json();throw new Error(n.message||"Failed to create group")}return(await t.json()).group}async function i(){const o=await fetch("/api/groups",{credentials:"include"});if(!o.ok){const e=await o.json();throw new Error(e.message||"Failed to fetch groups")}return(await o.json()).groups}async function c(){const o=await fetch("/api/groups/invitations",{credentials:"include"});if(!o.ok){const e=await o.json();throw new Error(e.message||"Failed to fetch invitations")}return(await o.json()).pendingInvitations}async function p(o,t){const e=await fetch(`/api/groups/invitation/${o}/respond`,{method:"POST",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify({groupId:o,response:t})});if(!e.ok){const n=await e.json();throw new Error(n.message||"Failed to respond to invitation")}return e.json()}async function d(o,t,e){const n=await fetch(`/api/groups/${o}/member/${t}/role`,{method:"PUT",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify({newRole:e})});if(!n.ok){const r=await n.json();throw new Error(r.message||"Failed to update member role")}return(await n.json()).group}async function u(o,t){const e=await fetch(`/api/groups/${o}/member/${t}`,{method:"DELETE",headers:{"Content-Type":"application/json"},credentials:"include"});if(!e.ok){const a=await e.json();throw new Error(a.message||"Failed to remove member")}return(await e.json()).group}async function w(o,t){const e=await fetch(`/api/groups/${o}/invite`,{method:"POST",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify({email:t})});if(!e.ok){const n=await e.json();throw new Error(n.message||"Failed to invite user")}return e.json()}async function l(o,t){const e=await fetch(`/api/groups/${o}`,{method:"PUT",headers:{"Content-Type":"application/json"},credentials:"include",body:JSON.stringify(t)});if(!e.ok){const a=await e.json();throw new Error(a.message||"Failed to update group")}return(await e.json()).group}async function g(o){const t=await fetch(`/api/groups/${o}`,{method:"DELETE",headers:{"Content-Type":"application/json"},credentials:"include"});if(!t.ok){const e=await t.json();throw new Error(e.message||"Failed to delete group")}return t.json()}export{c as a,u as b,s as c,l as d,g as e,i as g,w as i,p as r,d as u};
