import{w as a}from"./CNzxuJyc.js";import"./BLRFddlS.js";const n=a([]),c=a(0),i=a(!1),s=a(null);async function u(){try{i.set(!0),s.set(null);const t=await fetch("/api/notifications",{credentials:"include"});if(!t.ok)throw new Error(`Failed to fetch notifications: ${t.statusText}`);const r=await t.json();n.set(r),l()}catch(t){console.error("Error fetching notifications:",t),s.set(t instanceof Error?t.message:String(t))}finally{i.set(!1)}}async function h(t){try{const r=await fetch(`/api/notifications/${t}/read`,{method:"PUT",credentials:"include"});if(!r.ok)throw new Error(`Failed to mark notification as read: ${r.statusText}`);return n.update(e=>e.map(o=>o._id===t?{...o,read:!0}:o)),l(),!0}catch(r){return console.error("Error marking notification as read:",r),!1}}async function m(){try{const t=await fetch("/api/notifications/read-all",{method:"PUT",credentials:"include"});if(!t.ok)throw new Error(`Failed to mark all notifications as read: ${t.statusText}`);return n.update(r=>r.map(e=>({...e,read:!0}))),c.set(0),!0}catch(t){return console.error("Error marking all notifications as read:",t),!1}}function l(){n.update(t=>{const r=t.filter(e=>!e.read).length;return c.set(r),t})}u().catch(t=>{console.error("Failed to initialize notifications:",t)});export{m as a,u as f,i as l,h as m,n};
